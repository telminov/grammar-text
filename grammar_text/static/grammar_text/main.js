// Generated by CoffeeScript 1.10.0
(function() {
  var Suggest, createPhraseElement, createSuggestElement, getLeftPadding, suggestInputPrepare;

  createPhraseElement = function(phrase, position) {
    var el;
    el = $("<div class='phrase'>" + phrase.text + "</div>");
    el.appendTo('body');
    el.css(position);
    return el;
  };

  createSuggestElement = function(position) {
    var el;
    el = $("<div class='suggest'><ul class='choices'></ul></div>");
    el.appendTo('body');
    el.css(position);
    return el;
  };

  suggestInputPrepare = function(suggest) {
    suggest.input.attr('autocomplete', 'off');
    suggest.input.focus(function() {
      return suggest.open();
    });
    suggest.input.focusout(function() {
      return setTimeout(function() {
        if (!suggest.input.is(':focus')) {
          return suggest.close();
        }
      }, 100);
    });
    return suggest.input.keydown(function(event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return suggest.useSelected();
      } else if (event.keyCode === 27) {
        return suggest.close();
      } else if (event.keyCode === 40) {
        suggest.open();
        return suggest.moveSelectedDown();
      } else if (event.keyCode === 38) {
        suggest.open();
        return suggest.moveSelectedUp();
      }
    });
  };

  getLeftPadding = function(input) {
    var inputPadding, rowInputPadding;
    rowInputPadding = input.css('padding-left');
    inputPadding = Number(rowInputPadding.substring(0, rowInputPadding.length - 2));
    return inputPadding;
  };

  Suggest = (function() {
    function Suggest(input1, phrases) {
      this.input = input1;
      this.phrases = phrases;
      this.selectHandlers = [];
      this.isOpened = false;
      suggestInputPrepare(this);
    }

    Suggest.prototype.open = function() {
      var inputHeight, inputWidth, position;
      if (this.isOpened) {
        return;
      }
      this.isOpened = true;
      position = this.input.offset();
      this.element = createSuggestElement(position);
      inputHeight = this.input.outerHeight();
      this.element.css('margin-top', inputHeight);
      inputWidth = this.input.outerWidth();
      this.element.css('width', inputWidth);
      return this.refresh();
    };

    Suggest.prototype.close = function() {
      if (!this.isOpened) {
        return;
      }
      this.isOpened = false;
      return this.element.remove();
    };

    Suggest.prototype.refresh = function() {
      var i, len, phrase, phraseElement, ref, results;
      if (!this.isOpened) {
        return;
      }
      this.element.find('.choices li, .no-items').remove();
      if (this.phrases.length) {
        ref = this.phrases;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          phrase = ref[i];
          phraseElement = $("<li>" + phrase.text + "</li>");
          phraseElement.data(phrase);
          phraseElement.click((function(_this) {
            return function(event) {
              _this.select($(event.target).data());
              return _this.input.focus();
            };
          })(this));
          results.push(this.element.find('.choices').append(phraseElement));
        }
        return results;
      } else {
        return this.element.append('<div class="no-items">Нет элементов для выбора...</div>');
      }
    };

    Suggest.prototype.addSelectHandler = function(handler) {
      return this.selectHandlers.push(handler);
    };

    Suggest.prototype.select = function(phrase) {
      var handler, i, len, ref;
      ref = this.selectHandlers;
      for (i = 0, len = ref.length; i < len; i++) {
        handler = ref[i];
        handler(phrase);
      }
      return this.refresh();
    };

    Suggest.prototype.useSelected = function() {
      var phrase, selectedElement;
      selectedElement = this.element.find('.choices li.selected');
      if (!selectedElement.length) {
        return;
      }
      phrase = selectedElement.data();
      return this.select(phrase);
    };

    Suggest.prototype.moveSelectedDown = function() {
      var nextElement;
      nextElement = $('.choices li.selected').next();
      if (!nextElement.length) {
        nextElement = this.element.find('.choices li').first();
      }
      this.element.find('.choices li').removeClass('selected');
      return nextElement.addClass('selected');
    };

    Suggest.prototype.moveSelectedUp = function() {
      var prevElement;
      prevElement = $('.choices li.selected').prev();
      if (!prevElement.length) {
        prevElement = this.element.find('.choices li').last();
      }
      this.element.find('.choices li').removeClass('selected');
      return prevElement.addClass('selected');
    };

    return Suggest;

  })();

  this.GrammarText = (function() {
    function GrammarText(input, phrasesUrl) {
      this.phrasesUrl = phrasesUrl;
      this.input = $(input);
      this.phrases = [];
      this.suggestPhrases = [];
      this.selectedPhrases = [];
      this.suggest = new Suggest(this.input, this.suggestPhrases);
      this.suggest.addSelectHandler((function(_this) {
        return function(phrase) {
          return _this.renderPhrase(phrase);
        };
      })(this));
    }

    GrammarText.prototype.loadPhrases = function() {
      return $.get(this.phrasesUrl, (function(_this) {
        return function(result) {
          var i, j, len, len1, phrase, ref, results;
          for (i = 0, len = result.length; i < len; i++) {
            phrase = result[i];
            _this.phrases.push(phrase);
          }
          ref = _this.phrases;
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            phrase = ref[j];
            if (_.indexOf(_this.selectedPhrases, {
              text: phrase.text
            }) === -1) {
              results.push(_this.suggestPhrases.push(phrase));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    GrammarText.prototype.renderPhrase = function(phrase) {
      var inputPadding, newInputPadding, phraseElement, phrasePadding, position;
      position = this.input.offset();
      inputPadding = getLeftPadding(this.input);
      position.left += inputPadding;
      phraseElement = createPhraseElement(phrase, position);
      inputPadding = getLeftPadding(this.input);
      phrasePadding = phraseElement.outerWidth(true);
      newInputPadding = inputPadding + phrasePadding;
      this.input.css('padding-left', newInputPadding);
      this.selectedPhrases.push(phrase);
      return _.remove(this.suggestPhrases, {
        text: phrase.text
      });
    };

    return GrammarText;

  })();

}).call(this);
