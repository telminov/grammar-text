// Generated by CoffeeScript 1.10.0
(function() {
  var PHRASE_MOVE_LEFT_EVENT, PHRASE_MOVE_RIGHT_EVENT, PHRASE_REMOVE_EVENT, PhraseElement, Suggest, createSuggestElement, getLeftPadding, grammarInputPrepare, suggestInputPrepare;

  createSuggestElement = function(position) {
    var el;
    el = $("<div class='suggest'><ul class='choices'></ul></div>");
    el.appendTo('body');
    el.css(position);
    return el;
  };

  grammarInputPrepare = function(grammar) {
    return grammar.input.keydown(function(event) {
      console.log('grammar', event.keyCode);
      if (event.keyCode === 37) {
        if (grammar.input.val()) {
          return;
        }
        return grammar.selectLastPhrase();
      } else {
        return grammar.clearSelection();
      }
    });
  };

  suggestInputPrepare = function(suggest) {
    suggest.input.attr('autocomplete', 'off');
    suggest.input.focus(function() {
      return suggest.open();
    });
    suggest.input.focusout(function() {
      return setTimeout(function() {
        if (!suggest.input.is(':focus')) {
          return suggest.close();
        }
      }, 200);
    });
    return suggest.input.keydown(function(event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return suggest.useSelected();
      } else if (event.keyCode === 27) {
        return suggest.close();
      } else if (event.keyCode === 40) {
        if (!suggest.isOpened) {
          return suggest.open();
        } else {
          return suggest.moveSelectedDown();
        }
      } else if (event.keyCode === 38) {
        if (!suggest.isOpened) {
          return suggest.open();
        } else {
          return suggest.moveSelectedUp();
        }
      } else {
        return setTimeout(function() {
          return suggest.refresh();
        }, 10);
      }
    });
  };

  getLeftPadding = function(input) {
    var inputPadding, rawInputPadding;
    rawInputPadding = input.css('padding-left');
    inputPadding = Number(rawInputPadding.substring(0, rawInputPadding.length - 2));
    return inputPadding;
  };

  Suggest = (function() {
    function Suggest(input1, phrases1) {
      this.input = input1;
      this.phrases = phrases1;
      this.selectHandlers = [];
      this.isOpened = false;
      suggestInputPrepare(this);
    }

    Suggest.prototype.open = function() {
      var inputHeight, inputWidth, position;
      if (this.isOpened) {
        return;
      }
      this.isOpened = true;
      position = this.input.offset();
      this.element = createSuggestElement(position);
      inputHeight = this.input.outerHeight();
      this.element.css('margin-top', inputHeight);
      inputWidth = this.input.outerWidth();
      this.element.css('width', inputWidth);
      return this.refresh();
    };

    Suggest.prototype.close = function() {
      if (!this.isOpened) {
        return;
      }
      this.isOpened = false;
      return this.element.remove();
    };

    Suggest.prototype.refresh = function() {
      var filterText, j, k, len, len1, phrase, phraseItem, phraseText, phrases, ref;
      if (!this.isOpened) {
        return;
      }
      this.element.find('.choices li, .no-items').remove();
      phrases = [];
      ref = this.phrases;
      for (j = 0, len = ref.length; j < len; j++) {
        phrase = ref[j];
        filterText = this.input.val().toLowerCase();
        phraseText = phrase.text.toLowerCase();
        if (phraseText.indexOf(filterText) === 0) {
          phrases.push(phrase);
        }
      }
      if (phrases.length) {
        for (k = 0, len1 = phrases.length; k < len1; k++) {
          phrase = phrases[k];
          phraseItem = $("<li>" + phrase.text + "</li>");
          phraseItem.data(phrase);
          phraseItem.click((function(_this) {
            return function(event) {
              _this.select($(event.target).data());
              return _this.input.focus();
            };
          })(this));
          this.element.find('.choices').append(phraseItem);
        }
        return this.element.find('.choices li').first().addClass('selected');
      } else {
        return this.element.append('<div class="no-items">Нет элементов для выбора...</div>');
      }
    };

    Suggest.prototype.addSelectHandler = function(handler) {
      return this.selectHandlers.push(handler);
    };

    Suggest.prototype.select = function(phrase) {
      var handler, j, len, ref;
      ref = this.selectHandlers;
      for (j = 0, len = ref.length; j < len; j++) {
        handler = ref[j];
        handler(phrase);
      }
      this.input.val('');
      return this.refresh();
    };

    Suggest.prototype.useSelected = function() {
      var phrase, selectedElement;
      selectedElement = this.element.find('.choices li.selected');
      if (!selectedElement.length) {
        return;
      }
      phrase = selectedElement.data();
      return this.select(phrase);
    };

    Suggest.prototype.moveSelectedDown = function() {
      var nextElement;
      nextElement = $('.choices li.selected').next();
      if (!nextElement.length) {
        nextElement = this.element.find('.choices li').first();
      }
      this.element.find('.choices li').removeClass('selected');
      return nextElement.addClass('selected');
    };

    Suggest.prototype.moveSelectedUp = function() {
      var prevElement;
      prevElement = $('.choices li.selected').prev();
      if (!prevElement.length) {
        prevElement = this.element.find('.choices li').last();
      }
      this.element.find('.choices li').removeClass('selected');
      return prevElement.addClass('selected');
    };

    return Suggest;

  })();

  PHRASE_MOVE_LEFT_EVENT = 'PHRASE_MOVE_LEFT';

  PHRASE_MOVE_RIGHT_EVENT = 'PHRASE_MOVE_RIGHT';

  PHRASE_REMOVE_EVENT = 'PHRASE_REMOVE';

  PhraseElement = (function() {
    function PhraseElement(phrase1, position) {
      var contentHtml;
      this.phrase = phrase1;
      this.hasParams = this.phrase.text.indexOf('_') !== -1;
      contentHtml = this.phrase.text;
      contentHtml = contentHtml.replace(/_/g, "<input></input>");
      this.el = $("<div tabindex='0' class='phrase'>" + contentHtml + "</div>");
      if (!this.hasParams) {
        this.el.addClass('no-params');
      }
      this.el.appendTo('body');
      this.el.css(position);
      this.width = this.el.outerWidth(true);
      this.el.blur((function(_this) {
        return function() {
          return _this.deselect(true);
        };
      })(this));
      this.el.keydown((function(_this) {
        return function(event) {
          console.log('PhraseElement', event.keyCode);
          if (event.keyCode === 37) {
            return _this.moveSelectionLeft();
          } else if (event.keyCode === 39) {
            return _this.moveSelectionRight();
          } else if (event.keyCode === 46) {
            _this.moveSelectionRight();
            return _this.remove();
          } else if (event.keyCode === 8) {
            _this.moveSelectionLeft();
            return _this.remove();
          }
        };
      })(this));
      this.el.click((function(_this) {
        return function() {
          return _this.select();
        };
      })(this));
    }

    PhraseElement.prototype.select = function() {
      this.el.addClass('selected');
      return this.el.focus();
    };

    PhraseElement.prototype.deselect = function(noBlur) {
      var doBlur;
      this.el.removeClass('selected');
      doBlur = !noBlur;
      if (doBlur) {
        return this.el.blur();
      }
    };

    PhraseElement.prototype.isSelected = function() {
      return this.el.hasClass('selected');
    };

    PhraseElement.prototype.getText = function() {
      return this.phrase.text;
    };

    PhraseElement.prototype.getWidth = function() {
      return this.width;
    };

    PhraseElement.prototype.getLeftPosition = function() {
      var left, rawLeft;
      rawLeft = this.el.css('left');
      left = Number(rawLeft.substring(0, rawLeft.length - 2));
      return left;
    };

    PhraseElement.prototype.setLeftPosition = function(left) {
      return this.el.css('left', left);
    };

    PhraseElement.prototype.remove = function() {
      var e;
      this.el.remove();
      e = $.Event(PHRASE_REMOVE_EVENT, {
        phraseElement: this
      });
      return $(this).trigger(e);
    };

    PhraseElement.prototype.moveSelectionLeft = function() {
      var e;
      this.deselect();
      e = $.Event(PHRASE_MOVE_LEFT_EVENT, {
        phraseElement: this
      });
      return $(this).trigger(e);
    };

    PhraseElement.prototype.moveSelectionRight = function() {
      var e;
      this.deselect();
      e = $.Event(PHRASE_MOVE_RIGHT_EVENT, {
        phraseElement: this
      });
      return $(this).trigger(e);
    };

    return PhraseElement;

  })();

  this.GrammarText = (function() {
    function GrammarText(input, phrasesUrl) {
      this.phrasesUrl = phrasesUrl;
      this.input = $(input);
      this.phrases = [];
      this.suggestPhrases = [];
      this.selectedPhrases = [];
      this.suggest = new Suggest(this.input, this.suggestPhrases);
      this.suggest.addSelectHandler((function(_this) {
        return function(phrase) {
          return _this.renderPhrase(phrase);
        };
      })(this));
      this.phraseElements = [];
      grammarInputPrepare(this);
    }

    GrammarText.prototype.loadPhrases = function() {
      return $.get(this.phrasesUrl, (function(_this) {
        return function(result) {
          var j, len, phrase;
          for (j = 0, len = result.length; j < len; j++) {
            phrase = result[j];
            _this.phrases.push(phrase);
          }
          return _this.refreshSuggestPhrases();
        };
      })(this));
    };

    GrammarText.prototype.clearSelection = function() {
      var j, len, phraseElement, ref, results;
      ref = this.phraseElements;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        phraseElement = ref[j];
        results.push(phraseElement.deselect());
      }
      return results;
    };

    GrammarText.prototype.renderPhrase = function(phrase) {
      var inputPadding, newInputPadding, phraseElement, phrasePadding, position;
      this.clearSelection();
      position = this.input.offset();
      inputPadding = getLeftPadding(this.input);
      position.left += inputPadding;
      position.top -= 4;
      phraseElement = new PhraseElement(phrase, position);
      $(phraseElement).bind(PHRASE_MOVE_LEFT_EVENT, (function(_this) {
        return function(e) {
          return _this.moveLeftHandler(e);
        };
      })(this));
      $(phraseElement).bind(PHRASE_MOVE_RIGHT_EVENT, (function(_this) {
        return function(e) {
          return _this.moveRightHandler(e);
        };
      })(this));
      $(phraseElement).bind(PHRASE_REMOVE_EVENT, (function(_this) {
        return function(e) {
          return _this.removePhraseHandler(e);
        };
      })(this));
      this.phraseElements.push(phraseElement);
      inputPadding = getLeftPadding(this.input);
      phrasePadding = phraseElement.getWidth();
      newInputPadding = inputPadding + phrasePadding;
      this.input.css('padding-left', newInputPadding);
      this.selectedPhrases.push(phrase);
      return this.refreshSuggestPhrases();
    };

    GrammarText.prototype.getSelectedPhraseElement = function() {
      var j, len, phraseElement, ref;
      ref = this.phraseElements;
      for (j = 0, len = ref.length; j < len; j++) {
        phraseElement = ref[j];
        if (phraseElement.isSelected()) {
          return phraseElement;
        }
      }
    };

    GrammarText.prototype.getSelectedPhraseIndex = function() {
      var index, selectedPhraseElement;
      selectedPhraseElement = this.getSelectedPhraseElement();
      if (!selectedPhraseElement) {
        return;
      }
      index = this.phraseElements.indexOf(selectedPhraseElement);
      if (index === -1) {
        return;
      }
      return index;
    };

    GrammarText.prototype.getPhraseIndex = function(phrase) {
      var i, j, len, phraseElement, ref, selectedIndex;
      selectedIndex = void 0;
      ref = this.phraseElements;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        phraseElement = ref[i];
        if (phrase.text === phraseElement.getText()) {
          selectedIndex = i;
          break;
        }
      }
      return selectedIndex;
    };

    GrammarText.prototype.selectLastPhrase = function() {
      var lastPhraseElement;
      if (!this.phraseElements.length) {
        return;
      }
      lastPhraseElement = this.phraseElements[this.phraseElements.length - 1];
      lastPhraseElement.select();
      return console.log('selectLastPhrase', lastPhraseElement);
    };

    GrammarText.prototype.selectPhraseByIndex = function(index) {
      var phraseElement;
      if (!this.phraseElements.length) {
        return;
      }
      phraseElement = this.phraseElements[index];
      return phraseElement.select();
    };

    GrammarText.prototype.refreshSuggestPhrases = function() {
      var j, k, len, len1, phrase, ref, ref1, results, selected, selectedPhrase;
      this.suggestPhrases.length = 0;
      ref = this.phrases;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        phrase = ref[j];
        selected = false;
        ref1 = this.selectedPhrases;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          selectedPhrase = ref1[k];
          if (selectedPhrase.text === phrase.text) {
            selected = true;
          }
        }
        if (!selected) {
          results.push(this.suggestPhrases.push(phrase));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GrammarText.prototype.moveLeftHandler = function(e) {
      var nextIndex, nextPhraseElement, phrase, phraseIndex;
      phrase = e.phraseElement.phrase;
      phraseIndex = this.getPhraseIndex(phrase);
      nextIndex = phraseIndex - 1;
      if (nextIndex < 0) {
        nextIndex = 0;
      }
      nextPhraseElement = this.phraseElements[nextIndex];
      return nextPhraseElement.select();
    };

    GrammarText.prototype.moveRightHandler = function(e) {
      var lastIndex, nextIndex, nextPhraseElement, phrase, phraseIndex;
      phrase = e.phraseElement.phrase;
      phraseIndex = this.getPhraseIndex(phrase);
      nextIndex = phraseIndex + 1;
      lastIndex = this.phraseElements.length - 1;
      if (nextIndex <= lastIndex) {
        nextPhraseElement = this.phraseElements[nextIndex];
        return nextPhraseElement.select();
      } else {
        return this.input.focus();
      }
    };

    GrammarText.prototype.removePhraseHandler = function(e) {
      var deleteIndex, el, inputPadding, j, left, len, newInputPadding, phraseElement, phrasePadding, ref;
      phraseElement = e.phraseElement;
      deleteIndex = this.getPhraseIndex(phraseElement.phrase);
      console.log('removePhraseHandler deleteIndex', deleteIndex);
      this.phraseElements.splice(deleteIndex, 1);
      phrasePadding = phraseElement.getWidth();
      inputPadding = getLeftPadding(this.input);
      newInputPadding = inputPadding - phrasePadding;
      this.input.css('padding-left', newInputPadding);
      ref = this.phraseElements.slice(deleteIndex);
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        left = el.getLeftPosition() - phrasePadding;
        el.setLeftPosition(left);
      }
      _.remove(this.selectedPhrases, {
        text: phraseElement.getText()
      });
      this.refreshSuggestPhrases();
      this.suggest.refresh();
      if (!this.phraseElements.length) {
        return this.input.focus();
      }
    };

    return GrammarText;

  })();

}).call(this);
