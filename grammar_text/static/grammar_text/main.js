// Generated by CoffeeScript 1.10.0
(function() {
  var Suggest, createPhraseElement, createSuggestElement;

  createPhraseElement = function(phrase, position) {
    var el;
    el = $("<div class='phrase'>" + phrase.text + "</div>");
    el.appendTo('body');
    el.css(position);
    return el;
  };

  createSuggestElement = function(position) {
    var el;
    el = $("<div class='suggest'><ul class='choices'></ul></div>");
    el.appendTo('body');
    el.css(position);
    return el;
  };

  Suggest = function(input, phrases) {
    this.input = $(input);
    this.phrases = phrases;
    return this.isOpened = false;
  };

  Suggest.prototype.open = function() {
    var inputHeight, inputWidth, position;
    this.isOpened = true;
    position = this.input.offset();
    this.element = createSuggestElement(position);
    inputHeight = this.input.outerHeight();
    this.element.css('margin-top', inputHeight);
    inputWidth = this.input.outerWidth();
    this.element.css('width', inputWidth);
    return this.refresh();
  };

  Suggest.prototype.refresh = function() {
    var i, len, phrase, ref;
    if (!this.isOpened) {
      return;
    }
    ref = this.phrases;
    for (i = 0, len = ref.length; i < len; i++) {
      phrase = ref[i];
      this.element.find('.choices').append("<li>" + phrase.text + "</li>");
    }
    return this.element.find('.choices li').first().addClass('selected');
  };

  window.GrammarText = function(input, phrasesUrl) {
    this.input = $(input);
    this.phrasesUrl = phrasesUrl;
    this.phrases = [];
    this.suggest = new Suggest(this.input, this.phrases);
    return this;
  };

  window.GrammarText.prototype.loadPhrases = function() {
    return $.get(this.phrasesUrl, (function(_this) {
      return function(result) {
        var i, len, phrase, results;
        results = [];
        for (i = 0, len = result.length; i < len; i++) {
          phrase = result[i];
          results.push(_this.phrases.push(phrase));
        }
        return results;
      };
    })(this));
  };

  window.GrammarText.prototype.renderPhrase = function(phrase) {
    var inputPadding, newInputPadding, phraseElement, phrasePadding, position, rowInputPadding;
    position = this.input.offset();
    phraseElement = createPhraseElement(phrase, position);
    rowInputPadding = this.input.css('padding-left');
    inputPadding = Number(rowInputPadding.substring(0, rowInputPadding.length - 2));
    phrasePadding = phraseElement.outerWidth(true);
    newInputPadding = inputPadding + phrasePadding;
    return this.input.css('padding-left', newInputPadding);
  };

}).call(this);
